from ast import If
import random
   #ALGORITMOS DE BUSQUEDA
class Busqueda_Secuencial(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
class Busqueda_Dicotomico(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)

    #ALGORITMOS DE ORDENAMIENTO
class Ordenamiento_Burbuja(object):                                                                             
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
      #  print(self.lista)
    def _str_(self):
        return self.lista

    def Burbuja(self,array):
        array=self.lista
        length=len(array)-1
        print(length)
        for i in range(0,length):#puntero
            print(array)
            for j in range(0, length):#intercambio
                if array[j] > array [j+1]:
                    aux=array[j]
                    array[j]=array[j+1]
                    array[j+1]=aux
        return array

class Ordenamiento_Baraja(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
    def Baraja (self,array):
        array=self.lista
        lenght=len(array)
        for i in range(1,lenght):
            p = array[i]
            j = i-1
            while (j>=0 and array[j] > p):
             array[j+1] = array[j]
             j = j-1
             array[j+1] = p
             print(array)
        print(array)
class Ordenamiento_Shell(object):                                                                              
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
    def shell (self,array):
        array=self.lista
        lenght=len(array)
        print(lenght)
        intervalo=lenght//2
        while intervalo>0:
            for i in range (intervalo,lenght):
                print(array)
                p=array[i]
                q=i
                while q >= intervalo and array [q-intervalo]> p:
                    array[q]=array[q-intervalo]
                    q -= intervalo
                    array[q]=p
            intervalo//=2
        return array
class Ordenamiento_Quicksort(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
class Ordenamiento_Radix(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
class Ordenamiento_Binario(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
class Ordenamiento_Heapsort(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)



#                             PROGRAMA PRINCIPAL
                                                                                                                                                                                            
lista = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]#LISTA PARA ALMACENAR 20 ELEMENTOS

Menu=int(input("\tDESEA REALIZAR UN ORDENAMIENTO O UNA BUSQUEDA:\n--> 1. ORDENAMIENTO\n--> 2. BUSQUEDA\n--->"))
if Menu==1:
    Ordenamiento=int(input("QUE METODO DE ORDENAMIENTO DESEA REALIZAR:\n--> 1. BURBUJA\n--> 2. BARAJA\n--> 3. SHELL\n--> 4.QUICKSORT\n--> 5. RADIX\n--> 6. BINARIO\n--> 7. HEAPSORT\n--->"))
    if Ordenamiento==1:
        Lista=Ordenamiento_Burbuja()
        for i in range(len(lista)):#VECTOR PARA ALMACENAR ELEMENTOS
            Lista.add()#AGREGAR ELEMENTO A LA LISTA
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{Lista.lista}")#IMPRIMIR LISTA ALEATORIA
        print(Lista.Burbuja(lista))
    elif Ordenamiento==2:
        Lista=Ordenamiento_Baraja()
        for i in range(len(lista)):#VECTOR PARA ALMACENAR ELEMENTOS
            Lista.add()#AGREGAR ELEMENTO A LA LISTA
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{Lista.lista}")#IMPRIMIR LISTA ALEATORIA
        Lista.Baraja(lista)
    elif Ordenamiento==3:
        Lista=Ordenamiento_Shell()
        for i in range(len(lista)):#VECTOR PARA ALMACENAR ELEMENTOS
            Lista.add()#AGREGAR ELEMENTO A LA LISTA
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{Lista.lista}")#IMPRIMIR LISTA ALEATORIA
        print(Lista.shell(lista))
elif Menu==2:
    Busqueda=int(input("QUE METODO DE BUSQUEDA DESEA UTILIZAR:\n--> 1. SECUENCIAL\n--> 2. DICOTOMICO\n--->"))
else:
    print("X OPCIÃ“N NO VALIDA X")