from ast import If
import random
   #ALGORITMOS DE BUSQUEDA
class Busqueda_Secuencial(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
class Busqueda_Dicotomico(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)

    #ALGORITMOS DE ORDENAMIENTO
class Ordenamiento_Burbuja(object):                                                                             
    def Burbuja(array):
        #array=self.lista
        length=len(array)-1
        print(length)
        for i in range(0,length):#puntero
            print(array)
            for j in range(0, length):#intercambio
                if array[j] > array [j+1]:
                    aux=array[j]
                    array[j]=array[j+1]
                    array[j+1]=aux
        return array

class Ordenamiento_Baraja(object):                                                                                 
    def Baraja (array):
        lenght=len(array)
        for i in range(1,lenght):
            p = array[i]
            j = i-1
            while (j>=0 and array[j] > p):
             array[j+1] = array[j]
             j = j-1
             array[j+1] = p
             print(array)
        print(array)
class Ordenamiento_Shell(object):                                                                              
    def Shell (array):
        lenght=len(array)
        print(lenght)
        intervalo=lenght//2
        while intervalo>0:
            for i in range (intervalo,lenght):
                print(array)
                p=array[i]
                q=i
                while q >= intervalo and array [q-intervalo]> p:
                    array[q]=array[q-intervalo]
                    q -= intervalo
                    array[q]=p
            intervalo//=2
        return array
class Ordenamiento_Quicksort(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
class Ordenamiento_RadixSort(object):
    def Radix(array):
        n=0
        for i in array:
         if len(i) > n:
            n=len(i)

        for j in range(0,len(array)):
            while len(array[j]) < n:
                array[j]= "0" + array[j]#igualar cantidad de digitos agregando 0

        for k in range(n-1,-1,-1):
            grupos=[[]for i in range(10)]#10 grupos dentro de la lista para asignarle su grupo a cada elemento
            for i in range(len(array)):
                grupos[int(array[i][k])].append(array[i])
            array=[]
            for l in grupos:
                array += l
                print(grupos)
        return [int(i) for i in array]
class Ordenamiento_Binario(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)
class Ordenamiento_Heapsort(object):
    def __init__(self):#METODO ALMACENAMIENTO DE DATOS
        self.lista = []
    def add(self):#METODO AGREGAR ELEMENTO
        item=random.randint(1, 100)
        self.lista.append(item)



#                             PROGRAMA PRINCIPAL
                                                                                                                                                                                            
Menu=int(input("\tDESEA REALIZAR UN ORDENAMIENTO O UNA BUSQUEDA:\n--> 1. ORDENAMIENTO\n--> 2. BUSQUEDA\n--->"))
if Menu==1:
    Ordenamiento=int(input("QUE METODO DE ORDENAMIENTO DESEA REALIZAR:\n--> 1. BURBUJA\n--> 2. BARAJA\n--> 3. SHELL\n--> 4.QUICKSORT\n--> 5. RADIX\n--> 6. BINARIO\n--> 7. HEAPSORT\n--->"))
    if Ordenamiento==1:#burbuja               
        lista = [int(random.randint(0,100)) for i in range (20)]#LISTA PARA ALMACENAR 20 ELEMENTOS
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{lista}")#IMPRIMIR LISTA ALEATORIA
        print(Ordenamiento_Burbuja.Burbuja(lista))
    elif Ordenamiento==2:#baraja                  
        lista = [int(random.randint(0,100)) for i in range (20)]#LISTA PARA ALMACENAR 20 ELEMENTOS
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{lista}")#IMPRIMIR LISTA ALEATORIA
        print(Ordenamiento_Baraja.Baraja(lista))
    elif Ordenamiento==3:#shell                    
        lista = [int(random.randint(0,100)) for i in range (20)]#LISTA PARA ALMACENAR 20 ELEMENTOS
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{lista}")#IMPRIMIR LISTA ALEATORIA
        print(Ordenamiento_Shell.Shell(lista))
    elif Ordenamiento==4:#quicksort
        lista = [int(random.randint(0,100)) for i in range (20)]#LISTA PARA ALMACENAR 20 ELEMENTOS
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{lista}")#IMPRIMIR LISTA ALEATORIA
        print(Ordenamiento_Quicksort.Quicksort(lista))
    elif Ordenamiento==5:#radix                      
        lista = [int(random.randint(0,100)) for i in range (20)]#LISTA PARA ALMACENAR 20 ELEMENTOS
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{lista}")#IMPRIMIR LISTA ALEATORIA
        print(Ordenamiento_RadixSort.Radix(lista))
    elif Ordenamiento==6:#Binario
        lista = [int(random.randint(0,100)) for i in range (20)]#LISTA PARA ALMACENAR 20 ELEMENTOS
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{lista}")#IMPRIMIR LISTA ALEATORIA
        print(Ordenamiento_Binario.Binario(lista))
    elif Ordenamiento==7:#heapsort
        lista = [int(random.randint(0,100)) for i in range (20)]#LISTA PARA ALMACENAR 20 ELEMENTOS
        print(f"\t\t\t <<<LISTA DE ELEMENTOS>>>\n{lista}")#IMPRIMIR LISTA ALEATORIA
        print(Ordenamiento_Heapsort.Heapsort(lista))
elif Menu==2:
    Busqueda=int(input("QUE METODO DE BUSQUEDA DESEA UTILIZAR:\n--> 1. SECUENCIAL\n--> 2. DICOTOMICO\n--->"))
else:
    print("X OPCIÃ“N NO VALIDA X")